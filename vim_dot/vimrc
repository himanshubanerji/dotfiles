call plug#begin()
Plug 'preservim/nerdtree'
Plug 'tpope/vim-sensible'
Plug 'uiiaoo/java-syntax.vim'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'vim-airline/vim-airline'
Plug 'morhetz/gruvbox'
Plug 'bluz71/vim-nightfly-colors'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
call plug#end()

let g:airline_powerline_fonts = 1
let g:material_terminal_italics = 1
let g:material_theme_style = 'palenight-community'

"Used color-schemes
" colorscheme material
" colorscheme gruvbox
" colorscheme vim-material
colorscheme nightfly

hi! Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE



set termguicolors
set showcmd


" Fix Italics in vim
if !has('nvim')
  let &t_ZH="\e[3m"
  let &t_ZR="\e[23m"
endif

" Set line-number and highlight color in vim 
set number
highlight clear LineNr
highlight LineNr guifg=yellow


" Competitive coding coding for vim
set autoindent 
set smartindent
inoremap { {}<Esc>ha
inoremap ( ()<Esc>ha
inoremap [ []<Esc>ha
inoremap " ""<Esc>ha
inoremap ' ''<Esc>ha
inoremap ` ``<Esc>ha

" Tab spaces
set tabstop=4
set shiftwidth=4
set expandtab

" Changing line cursor to thin when in inset mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

"NERDTree Toggle
nmap <C-n> :NERDTreeToggle<CR>

"open NERDTree automatically
autocmd VimEnter * NERDTree | wincmd p
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Shortcutting split navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l


" Map fzf
nnoremap <C-f> :FZF<CR>
